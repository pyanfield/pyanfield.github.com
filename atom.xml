<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Little.Cool]]></title>
  <subtitle><![CDATA[Share Your Passion To Light Your Dreams]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://little.cool/"/>
  <updated>2014-11-16T07:44:54.987Z</updated>
  <id>http://little.cool/</id>
  
  <author>
    <name><![CDATA[pyanfield]]></name>
    <email><![CDATA[pyanfield@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[2014 APEC 的巧妙翻译]]></title>
    <link href="http://little.cool/2014/11/16/2014-APEC-%E7%9A%84%E5%B7%A7%E5%A6%99%E7%BF%BB%E8%AF%91/"/>
    <id>http://little.cool/2014/11/16/2014-APEC-的巧妙翻译/</id>
    <published>2014-11-16T07:22:21.000Z</published>
    <updated>2014-11-16T07:44:20.000Z</updated>
    <content type="html"><![CDATA[<p>2014 年的北京的 APEC 终于结束了，除了老百姓发明的 APEC Blue 等带有嘲讽色彩的新词之外，让我们看看网友收集的一些习大大讲话的神翻译。</p>
<p><strong>山明水净夜来霜，数树深红出浅黄。</strong>这句是出自唐朝诗人刘禹锡的《秋词二首》，全诗如下：</p>
<blockquote>
<p>自古逢秋悲寂寥，我言秋日胜春朝。<br>晴空一鹤排云上，便引诗情到碧霄。<br>山明水净夜来霜，数树深红出浅黄。<br>试上高楼清入骨，岂如春色嗾人狂。</p>
</blockquote>
<p>中国的古诗讲究对仗和押韵，所以翻译起来很难。看看我们的翻译是怎么翻译的：</p>
<blockquote>
<p>The water is clear and the mountain is bright. The frost comes in at night, trees are covered with deep scarlet leaves mixed with yellow that is light.<br>这里的 <em>bright</em>,<em>night</em>和<em>light</em>也都比较押韵。</p>
</blockquote>
<p><strong>有路才能人畅其行，物畅其流</strong></p>
<blockquote>
<p>With roads in place, people and goods can flow.</p>
</blockquote>
<p><strong>志同道合</strong></p>
<blockquote>
<p>People who cherish the same ideals follow the same path.</p>
</blockquote>
<p><strong>志存高远，脚踏实地</strong></p>
<blockquote>
<p>Aspire for high and grand <strong>while</strong> planting our feet firmly on the ground.</p>
</blockquote>
<p><strong>朋友多了，路才好走</strong></p>
<blockquote>
<p>More friends, more opportunities.</p>
</blockquote>
<p><strong>大时代需要大格局，大格局需要大智慧</strong></p>
<blockquote>
<p>A great era <strong>calls for</strong> great vision, which in turn <strong>requires</strong> great wisdom.s</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>2014 年的北京的 APEC 终于结束了，除了老百姓发明的 APEC Blue 等带有嘲讽色彩的新词之外，让我们看看网友收集的一些习大大讲话的神翻译。</p>
<p><strong>山明水净夜来霜，数树深红出浅黄。</strong>这句是出自唐朝诗人刘禹锡的《秋词二首》，]]>
    </summary>
    
      <category term="english" scheme="http://little.cool/tags/english/"/>
    
      <category term="others" scheme="http://little.cool/categories/others/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[修改 theme 的CDN 链接到国内]]></title>
    <link href="http://little.cool/2014/11/08/%E4%BF%AE%E6%94%B9-theme-%E7%9A%84CDN-%E9%93%BE%E6%8E%A5%E5%88%B0%E5%9B%BD%E5%86%85/"/>
    <id>http://little.cool/2014/11/08/修改-theme-的CDN-链接到国内/</id>
    <published>2014-11-08T09:26:30.000Z</published>
    <updated>2014-11-08T09:43:44.000Z</updated>
    <content type="html"><![CDATA[<p>本站是基于 <a href="http://hexo.io" target="_blank" rel="external">hexo</a> 搭建，使用了 <a href="https://github.com/joyceim/hexo-theme-apollo" target="_blank" rel="external">Apollo Theme</a>, 但是在国内访问速度超慢。</p>
<p>后来查了一下，原来是使用了 google 的 CDN 和调用了 google web fonts 字体库里面的字体。因为众所周知的原因，国内访问 google 的服务就是灾难（我可以骂人嘛）。</p>
<p>所以只能将他们改到国内的一些 CDN 服务上来，好在一些通用的代码库的 CDN 国内都有很好的支持，比如：</p>
<ul>
<li><a href="http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs" target="_blank" rel="external">百度 CDN 公共库</a></li>
<li><a href="http://lib.sinaapp.com/" target="_blank" rel="external">新浪云计算CDN公共库</a></li>
<li><a href="http://www.staticfile.org/" target="_blank" rel="external">七牛云存储静态文件CDN</a></li>
<li><a href="http://libs.useso.com/" target="_blank" rel="external">360网站卫士CDN前端公共库</a></li>
</ul>
<p>但是对于 google web fonts 字体库的支持，则没有那么多了，貌似目前只有<a href="http://libs.useso.com/" target="_blank" rel="external">360网站卫士</a>有提供，而且使用起来非常的简单。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本站是基于 <a href="http://hexo.io" target="_blank" rel="external">hexo</a> 搭建，使用了 <a href="https://github.com/joyceim/hexo-theme-apollo" targ]]>
    </summary>
    
      <category term="CDN" scheme="http://little.cool/tags/CDN/"/>
    
      <category term="fonts" scheme="http://little.cool/tags/fonts/"/>
    
      <category term="google" scheme="http://little.cool/tags/google/"/>
    
      <category term="others" scheme="http://little.cool/categories/others/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Using New Domain Name - Little.Cool]]></title>
    <link href="http://little.cool/2014/11/06/Using-New-Domain-Name-Little-Cool/"/>
    <id>http://little.cool/2014/11/06/Using-New-Domain-Name-Little-Cool/</id>
    <published>2014-11-06T14:37:28.000Z</published>
    <updated>2014-11-06T14:44:37.000Z</updated>
    <content type="html"><![CDATA[<p>从今天开始启用新的域名 <strong>Little.Cool</strong>, 申请这个域名纯粹是位了好玩，现在顶级域名 <code>.com</code> 能申请到好的已经很不容易了，而一些像 <code>.cool</code> / <code>.guru</code> / <code>.today</code> 之类的还是能申请到一些让人满意的域名的。而且这些域名后缀也挺不错，方便好记。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从今天开始启用新的域名 <strong>Little.Cool</strong>, 申请这个域名纯粹是位了好玩，现在顶级域名 <code>.com</code> 能申请到好的已经很不容易了，而一些像 <code>.cool</code> / <code>.guru</cod]]>
    </summary>
    
      <category term="others" scheme="http://little.cool/categories/others/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Constants in Objective-C]]></title>
    <link href="http://little.cool/2013/12/02/Constants_in_Objective-C/"/>
    <id>http://little.cool/2013/12/02/Constants_in_Objective-C/</id>
    <published>2013-12-02T07:42:02.000Z</published>
    <updated>2014-11-07T02:50:56.000Z</updated>
    <content type="html"><![CDATA[<p>定义一个全局的常量以便在 <code>Objective-C</code> 的项目中使用。可以通过创建一个头文件，比如 <code>Constants.h</code>，然后在头文件声明如下：</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FOUNDATION_EXPORT <span class="built_in">NSString</span> *<span class="keyword">const</span> MyFirstConstant;</div><div class="line">FOUNDATION_EXPORT <span class="built_in">NSString</span> *<span class="keyword">const</span> MySecondConstant;</div></pre></td></tr></table></figure>

<p>然后在你的执行文件中 <code>Constants.m</code> 中：</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> MyFirstConstant = <span class="string">@"FirstConstant"</span>;</div><div class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> MySecondConstant = <span class="string">@"SecondConstant"</span>;</div></pre></td></tr></table></figure>

<p>将你的 <code>Constants.m</code> 文件添加到你的 <code>application/framework</code> 的 <code>target</code> 中。这样你就可以使用这些全局的常量了。</p>
<p>注意这里使用的 <code>FOUNDATION_EXPORT</code> 因为，当你在 objective-c 中引入了 <code>Foundation Framework</code> 之后，你最好是用 <code>FOUNDATION_EXPORT</code> 来代替 <code>extern</code>, 因为在 <code>NSObjCRuntime.h</code> 中它包括了一些 C 和 C++ 的库，为了能更好的和这些 C 和 C++ 库兼容，所以建议用 <code>FOUNDATION_EXPORT</code>。</p>
<p><a href="http://stackoverflow.com/questions/538996/constants-in-objective-c" target="_blank" rel="external">http://stackoverflow.com/questions/538996/constants-in-objective-c</a><br><a href="http://stackoverflow.com/questions/19192432/when-to-use-foundation-export?lq=1" target="_blank" rel="external">http://stackoverflow.com/questions/19192432/when-to-use-foundation-export?lq=1</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>定义一个全局的常量以便在 <code>Objective-C</code> 的项目中使用。可以通过创建一个头文件，比如 <code>Constants.h</code>，然后在头文件声明如下：</p>
<figure class="highlight obj-c"><tab]]>
    </summary>
    
      <category term="Objective-C" scheme="http://little.cool/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://little.cool/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[start with sencha framework with ios]]></title>
    <link href="http://little.cool/2013/03/21/start-with-sencha-framework-with-ios/"/>
    <id>http://little.cool/2013/03/21/start-with-sencha-framework-with-ios/</id>
    <published>2013-03-21T07:49:04.000Z</published>
    <updated>2014-11-05T09:12:29.000Z</updated>
    <content type="html"><![CDATA[<p>最近准备在一个简单的ios项目中使用HTML5 去开发，最终选择尝试一下 <a href="http://www.sencha.com/products/touch/" target="_blank" rel="external">Sencha Touch</a>。今天在这里记录一下简单的搭建步骤。</p>
<p>首先是安装 <a href="http://www.sencha.com/products/touch/" target="_blank" rel="external">Sencha Touch</a></p>
<ul>
<li>确保自己的机器已经有了JRE环境，如果没有，安装一个.</li>
<li><p>下载并且安装 <a href="http://compass-style.org/install/" target="_blank" rel="external">Compass</a>.</p>
<pre><code>  Compass 需要你的电脑运行有 Ruby 的环境，所以你应该想安装 Ruby,至于怎么安装，这里省略100字。
  但是对于怎么安装 Compass ，可以使用下面的命令：
  -<span class="ruby"> gem update --system
</span>  -<span class="ruby"> gem install compass</span>
</code></pre></li>
<li><p>然后就要安装 <a href="http://www.sencha.com/products/sencha-cmd/download" target="_blank" rel="external">Sencha Cmd</a>.</p>
</li>
<li>下载 <a href="http://www.sencha.com/products/touch/" target="_blank" rel="external">Sencha Touch SDK</a> 或者 <a href="http://www.sencha.com/products/extjs/" target="_blank" rel="external">Sencha Ext JS</a>.</li>
<li>好了最后就是解压你下载的 SDK.</li>
<li>这个时候你可以使用 <code>sencha help</code> 命令去试验一下是否安装成功。如果成功了，那祝贺你，可以进行下面的步骤了。</li>
</ul>
<p>生成一个 iOS 的程序：</p>
<ul>
<li><code>cd &lt;your sencha touch directory&gt;</code></li>
<li><code>sencha generate app &lt;myapp&gt; &lt;myapp&#39;s directory&gt;</code></li>
<li><code>cd &lt;myapp&#39;s directory&gt;</code></li>
<li><code>sencha app build native</code> 因为这里我们是需要build一个ios程序，所以这里选择使用<code>native</code></li>
<li><code>sencha app package run packager.json</code> 这个步骤是将你build好的应用程序用本地的模拟器打开.</li>
</ul>
<p>不过在这里我遇到了一个问题，就是使用<code>sencha generate app</code>命令自动生成的应用程序，在我的iphone 5的模拟器里卖弄打开的时候，上下是有黑边的。其实这是 sencha 的一个bug.不过网上也有人给出了一个临时的<a href="http://www.sencha.com/forum/showthread.php?251157-Letter-Boxed-App-on-iphone-5" target="_blank" rel="external">解决方案</a>。</p>
<pre><code>其实这个也可以说是 ios 的一个bug,你如果做过<span class="keyword">native</span>的应用程序应该知道，在我们将以前的iphone4上的程序转到iphone5上的时候是有同样的问题的，那时候我们是讲一个名字为 <span class="keyword">Default</span>-<span class="number">568</span>h@<span class="number">2</span>x.png的图片放在项目目录下面，当然这个图片的大小应该是<span class="number">640</span>*<span class="number">1136</span>.而在这里呢我们也需要一个这样的图片，我们需要讲这个图片放在我们项目&lt;myapp&gt;<span class="regexp">/resources/</span>startup下面，因为在我们build的时候，这些文件会被自动拷贝到 &lt;myapp&gt;<span class="regexp">/webapp/</span>resources<span class="regexp">/startup路径下面，然后在我们的项目文件夹下的 packager.json 里添加一行 "rawConfig":"&lt;key&gt;UILaunchImageFile&lt;/</span>key&gt;&lt;string&gt;webapp<span class="regexp">/resources/</span>startup<span class="regexp">/Default-568h@2x.png&lt;/</span>string&gt;<span class="string">"`.</span>
</code></pre><p>好了，Sencha之旅的第一步还算顺利吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近准备在一个简单的ios项目中使用HTML5 去开发，最终选择尝试一下 <a href="http://www.sencha.com/products/touch/" target="_blank" rel="external">Sencha Touch</a>。今天在这]]>
    </summary>
    
      <category term="sencha" scheme="http://little.cool/tags/sencha/"/>
    
      <category term="Javascript" scheme="http://little.cool/categories/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WSPieChart is ok]]></title>
    <link href="http://little.cool/2012/02/21/wspiechart-is-ok/"/>
    <id>http://little.cool/2012/02/21/wspiechart-is-ok/</id>
    <published>2012-02-21T07:47:20.000Z</published>
    <updated>2014-11-07T02:53:04.000Z</updated>
    <content type="html"><![CDATA[<p>At present, pie chart is ok.There are two classes for pie chart, one is <a href="https://github.com/pyanfield/WSChart/blob/master/WSCharts/WSPieChartView.h" target="_blank" rel="external"><code>WSPieChartView</code></a>, another one is <a href="https://github.com/pyanfield/WSChart/blob/master/WSCharts/WSPieChartWithMotionView.h" target="_blank" rel="external"><code>WSPieChartWithMotionView</code></a>.</p>
<h3 id="The_difference_between_WSPieChartView_and_WSPieChartWithMotion_are_below:">The difference between WSPieChartView and WSPieChartWithMotion are below:</h3>
<ul>
<li>Drawing the pie sector on the UIView in <a href="https://github.com/pyanfield/WSChart/blob/master/WSCharts/WSPieChartView.h" target="_blank" rel="external"><code>WSPieChartView</code></a>. But in the <a href="https://github.com/pyanfield/WSChart/blob/master/WSCharts/WSPieChartWithMotionView.h" target="_blank" rel="external"><code>WSPieChartWithMotionView</code></a> is CALayer. Extracted drawn content to different part.</li>
<li>Adding open and close animation on <a href="https://github.com/pyanfield/WSChart/blob/master/WSCharts/WSPieChartWithMotionView.h" target="_blank" rel="external"><code>WSPieChartWithMotionView</code></a>.So when you press the pie, you can find it open smoothly. But <a href="https://github.com/pyanfield/WSChart/blob/master/WSCharts/WSPieChartView.h" target="_blank" rel="external"><code>WSPieChartView</code></a> doesn’t have this function.</li>
<li>Adding transformation on the pie when update the datas. This is only support on <a href="https://github.com/pyanfield/WSChart/blob/master/WSCharts/WSPieChartWithMotionView.h" target="_blank" rel="external"><code>WSPieChartWithMotionView</code></a>.</li>
<li>Removing the indicator from <a href="https://github.com/pyanfield/WSChart/blob/master/WSCharts/WSPieChartWithMotionView.h" target="_blank" rel="external"><code>WSPieChartWithMotionView</code></a>. Maybe I will add it later.</li>
</ul>
<h3 id="Key_points_when_you_use_WSPieChartWithMotion:">Key points when you use WSPieChartWithMotion:</h3>
<ul>
<li>Carefully using the shadow. Because it will create shadow on both view and layers.Detail information you can find on the comments of class.</li>
<li>Switching data. The datas must have same titles. But they can be different order.<br>The codes are just tested on simulator, not on device.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>At present, pie chart is ok.There are two classes for pie chart, one is <a href="https://github.com/pyanfield/WSChart/blob/master/WSChart]]>
    </summary>
    
      <category term="opensource" scheme="http://little.cool/tags/opensource/"/>
    
      <category term="iOS" scheme="http://little.cool/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to add CGPoint to NSMutableArray]]></title>
    <link href="http://little.cool/2012/02/01/how-to-add-cgpoint-to-nsmutablearray/"/>
    <id>http://little.cool/2012/02/01/how-to-add-cgpoint-to-nsmutablearray/</id>
    <published>2012-02-01T07:46:26.000Z</published>
    <updated>2014-11-07T02:51:38.000Z</updated>
    <content type="html"><![CDATA[<p>CGPoint is a C structure not an object. So you can’t add CGPoint to NSMutableArry directly.<br>But you can use NSValue to convert it to object. like this:</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGPoint</span> point = CGPointMake(<span class="number">0.0</span>,<span class="number">0.0</span>);</div><div class="line">NSValue *pointValue = [NSValue valueWithCGPoint:point];</div><div class="line">[nsarray addObject:pointValue];</div></pre></td></tr></table></figure>

<p>It is very simple to get this value .</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGPoint</span> point = [[nsarray objectAtIndex:i] CGPointValue];</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>CGPoint is a C structure not an object. So you can’t add CGPoint to NSMutableArry directly.<br>But you can use NSValue to convert it to o]]>
    </summary>
    
      <category term="Objective-C" scheme="http://little.cool/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://little.cool/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Property’s synthesized getter follows Cocoa naming convention for returning ‘owned’ objects]]></title>
    <link href="http://little.cool/2011/12/19/property%E2%80%99s-synthesized-getter-follows-cocoa-naming-convention-for-returning-%E2%80%98owned%E2%80%99-objects/"/>
    <id>http://little.cool/2011/12/19/property’s-synthesized-getter-follows-cocoa-naming-convention-for-returning-‘owned’-objects/</id>
    <published>2011-12-19T07:44:49.000Z</published>
    <updated>2014-11-07T02:52:38.000Z</updated>
    <content type="html"><![CDATA[<p>今天在声明一个类属性的时候遇到了这样一个错误 “ Property’s synthesized getter follows Cocoa naming convention for returning ‘owned’ objects” 。我类声明文件 ( .h) 如下：</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyNoteViewController</span>:<span class="title">UIViewController</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) NewNoteViewController *newNoteViewController;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>

<p>然后在我的执行文件 (.m) 中如下的地方就会出现这个错误：</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@synthesize</span> newNoteViewController = _newNoteViewController;</div></pre></td></tr></table></figure>

<p>找了半天，看了半天也没有发现到底是那的错误，最后在StackOverFlow上面找到了答案，原来在iOS5中，如果你的项目支持ARC的话，那么你的property的名字不能以new开头。具体的原因在这里 <a href="http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/_index.html" target="_blank" rel="external">http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/_index.html</a></p>
<blockquote>
<p>To allow interoperation with manual retain-release code, ARC imposes some constraints on method and variable naming:<br>You cannot give a property a name that begins with new.<br>悲催的bug，要谨记啊，一定要尽量的避免使用new这样的关键字作为变量的开头，说不定哪天就出现了问题。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在声明一个类属性的时候遇到了这样一个错误 “ Property’s synthesized getter follows Cocoa naming convention for returning ‘owned’ objects” 。我类声明文件 ( .h) 如下：</]]>
    </summary>
    
      <category term="ARC" scheme="http://little.cool/tags/ARC/"/>
    
      <category term="Objective-C" scheme="http://little.cool/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://little.cool/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[arc enforces new rules]]></title>
    <link href="http://little.cool/2011/12/19/arc-enforces-new-rules/"/>
    <id>http://little.cool/2011/12/19/arc-enforces-new-rules/</id>
    <published>2011-12-19T07:43:51.000Z</published>
    <updated>2014-11-07T02:50:38.000Z</updated>
    <content type="html"><![CDATA[<p>iOS5中，引入了ARC的功能，具体概念如下：</p>
<blockquote>
<p>Automatic Reference Counting (ARC) is a compiler feature that provides automatic memory management of Objective-C objects. Rather than having to think about about retain and release operations, ARC allows you to concentrate on the interesting code, the object graphs, and the relationships between objects in your application.</p>
</blockquote>
<p>ARC主要就是为Objective-C提供了一种自动的内存管理功能。因为在以前的项目中，在内存管理方面，要认为的去做很多大量的重复性的工作。现在有了ARC之后，我们可以更好的专注自己的代码逻辑。一个新的功能的引入，必然会有一些新的规则出现，所以我们在使用ARC的时候要注意一下几点：</p>
<ul>
<li>不用再去调用dealloc,retain,release,retainCount或者autorelease这些方法了。也就是说我们在代码中不需要这些了，是不是轻松很多啊。省去了代码中超级多的release。</li>
<li>不能使用NSAllocateObject和NSDeallocatedObject。</li>
<li>不能在C structires中使用对象指针。</li>
<li>There is no casual casting between id and void *.</li>
<li>不能使用NSAutoreleasePool，取而代之的是@autoreleasepool，你可以在你生成代码的main.m文件中看到这一变化。</li>
<li>不能使用memory zones，也就是说不在需要NSZone了。</li>
<li>还有一点就是在属性声明的时候，属性的名字不能以new开头。 （如果使用了，那么产生的错误，可以参考 Property’s synthesized getter follows Cocoa naming convention for returning ‘owned’ objects）.<br>以上内容取自<a href="http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/_index.html" target="_blank" rel="external">ARC Enforces New Rules</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>iOS5中，引入了ARC的功能，具体概念如下：</p>
<blockquote>
<p>Automatic Reference Counting (ARC) is a compiler feature that provides automatic memory manag]]>
    </summary>
    
      <category term="iOS" scheme="http://little.cool/tags/iOS/"/>
    
      <category term="ARC" scheme="http://little.cool/tags/ARC/"/>
    
      <category term="iOS" scheme="http://little.cool/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[random or arc4random]]></title>
    <link href="http://little.cool/2011/12/12/random-or-arc4random/"/>
    <id>http://little.cool/2011/12/12/random-or-arc4random/</id>
    <published>2011-12-12T07:43:03.000Z</published>
    <updated>2014-11-05T10:15:59.000Z</updated>
    <content type="html"><![CDATA[<p>如果在你的程序中，要使用到随机数，可能第一反应就是使用random()。但是在今天我看了一段代码之后，里面用到的是arc4random()而不是random()。所以就查了一下到底两个之间有什么区别。</p>
<p>不查不知道，一查才了解到，原来在随机数生成的选择上还是挺有讲究的。除了上面的arc4random() 和 random()之外，还有经常用到的rand().</p>
<p>它们之间的区别，用Google找到了一些信息。可以参考下面的内容：<br><a href="http://stackoverflow.com/questions/2794201/whats-the-difference-between-arc4random-and-random" target="_blank" rel="external">http://stackoverflow.com/questions/2794201/whats-the-difference-between-arc4random-and-random</a><br><a href="http://stackoverflow.com/questions/328950/c-the-definitive-truth-about-rand-random-and-arc4random" target="_blank" rel="external">http://stackoverflow.com/questions/328950/c-the-definitive-truth-about-rand-random-and-arc4random</a><br><a href="http://iphonedevelopment.blogspot.com/2008/10/random-thoughts-rand-vs-arc4random.html" target="_blank" rel="external">http://iphonedevelopment.blogspot.com/2008/10/random-thoughts-rand-vs-arc4random.html</a></p>
<p>其中的大体意思都是说arc4random()是产生随机数的首选方案，因为random()产生的是一个可预测的伪随机数，不适合用于安全要求高的情况下。而arc4random()是一个不太可预测的伪随机数，在用到安全性有要求的情况下，arc4random()要优于random()。而如果没有安全性要求的话，random()也是一个不错的选择。在上面提供的参考连接中还提到，rand()是标准C的一部分，而random()是POSIX的一部分，而arc4random()是只有BSD系统才提供的。所以在你要产生随机数的时候，一定要考虑好到底能不能用，和使用的环境是什么。在iPhone开发中，首推arc4random()来生成随机数。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果在你的程序中，要使用到随机数，可能第一反应就是使用random()。但是在今天我看了一段代码之后，里面用到的是arc4random()而不是random()。所以就查了一下到底两个之间有什么区别。</p>
<p>不查不知道，一查才了解到，原来在随机数生成的选择上还是挺有]]>
    </summary>
    
      <category term="Objective-C" scheme="http://little.cool/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://little.cool/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS UI Design resource]]></title>
    <link href="http://little.cool/2011/12/02/ios-ui-design-resource/"/>
    <id>http://little.cool/2011/12/02/ios-ui-design-resource/</id>
    <published>2011-12-02T07:42:02.000Z</published>
    <updated>2014-11-05T09:10:01.000Z</updated>
    <content type="html"><![CDATA[<p>在App store里面有很多的优秀应用，它们的设计都很赞，很多都值得我们去学习一下。多看看优秀的设计会激发我们更多的灵感，提高自己应用程序的UI设计水平，增强用户体验。</p>
<p>以下是一些不错的专门收集应用程序UI截图的网站：</p>
<ul>
<li><a href="http://developer.apple.com/wwdc/ada/" target="_blank" rel="external">Apple Design Award</a></li>
</ul>
<p>For iPhone:</p>
<ul>
<li><p><a href="http://pttrns.com/" target="_blank" rel="external">pttrns</a></p>
</li>
<li><p><a href="http://mobile-patterns.com/" target="_blank" rel="external">Mobile UI Patterns</a></p>
</li>
<li><p><a href="http://www.tappgala.com/" target="_blank" rel="external">TappGala</a></p>
</li>
<li><p><a href="http://tapfancy.com/" target="_blank" rel="external">TapFancy</a></p>
</li>
</ul>
<p>For iPad:</p>
<ul>
<li><a href="http://landingpad.org/" target="_blank" rel="external">Landing Pad</a></li>
</ul>
<p>For iPhone and iPad:</p>
<ul>
<li><p><a href="http://www.lovelyui.com/" target="_blank" rel="external">lovely ui</a></p>
</li>
<li><p><a href="http://iosinspires.me/" target="_blank" rel="external">iOS Inspires Me</a></p>
</li>
<li><p><a href="http://www.appsites.com/" target="_blank" rel="external">App Sites</a></p>
</li>
</ul>
<p>还有一些个人博客收集了一下他们喜欢的UI设计:</p>
<ul>
<li><p><a href="http://buildingiphoneapps.posterous.com/" target="_blank" rel="external">Building iPhone Apps</a></p>
</li>
<li><p><a href="http://wellplacedpixels.com/" target="_blank" rel="external">Well-Placed Pixels</a></p>
</li>
<li><p><a href="http://beautifulpixels.com/" target="_blank" rel="external">Beautiful Pixels</a></p>
</li>
</ul>
<p>好了如果你有什么好推荐，也可以留言，我会添加进来。<br>以上所有链接的地址都来自<a href="http://www.cocoanetics.com/2011/11/steal-good-stuff-ios-design-pattern-collections/" target="_blank" rel="external">http://www.cocoanetics.com/2011/11/steal-good-stuff-ios-design-pattern-collections/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在App store里面有很多的优秀应用，它们的设计都很赞，很多都值得我们去学习一下。多看看优秀的设计会激发我们更多的灵感，提高自己应用程序的UI设计水平，增强用户体验。</p>
<p>以下是一些不错的专门收集应用程序UI截图的网站：</p>
<ul>
<li><a hre]]>
    </summary>
    
      <category term="iOS" scheme="http://little.cool/tags/iOS/"/>
    
      <category term="Tools" scheme="http://little.cool/categories/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery Fundamentals]]></title>
    <link href="http://little.cool/2011/11/14/jquery-fundamentals/"/>
    <id>http://little.cool/2011/11/14/jquery-fundamentals/</id>
    <published>2011-11-14T07:48:06.000Z</published>
    <updated>2014-11-05T09:10:38.000Z</updated>
    <content type="html"><![CDATA[<p>I found a good web to learn basic of jQuery, maybe you know that, but I think it is really good.<br><a href="http://jqfundamentals.com/" target="_blank" rel="external"><code>jQuery Fundamentals::A guide to the basics of jQuery</code></a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I found a good web to learn basic of jQuery, maybe you know that, but I think it is really good.<br><a href="http://jqfundamentals.com/" ]]>
    </summary>
    
      <category term="jQuery" scheme="http://little.cool/tags/jQuery/"/>
    
      <category term="Javascript" scheme="http://little.cool/categories/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Github vs Bitbucket]]></title>
    <link href="http://little.cool/2011/01/14/github-vs-bitbucket/"/>
    <id>http://little.cool/2011/01/14/github-vs-bitbucket/</id>
    <published>2011-01-14T07:38:47.000Z</published>
    <updated>2014-11-05T09:09:04.000Z</updated>
    <content type="html"><![CDATA[<p>现在网上有很多代码托管网站，其中比较著名的有github, bitbucket和google code.但是就我现在个人的使用来看，我比较偏爱github 和 bitbucket. 所以不免将它们拿来比较一下，看看那个更适合自己。</p>
<p>在支持的版本控制工具上： github目前只支持git一种，而bitbucket现在则除了支持git之外，还Mercurial (hg)。这两个工具都很多教程，并且你如果会使用git的话，那么hg你也会很快上手，反之亦然，它们很多的命令都通用。并且他们的原理相同。但是在python开发人员中，似乎大家比较偏爱hg,因为hg就是用python来开发的。不过我个人倒是比较喜欢git，也许是最开始就是从git学起的吧。并且git作为Xcode内置的版本控制工具，在使用Xcode开发项目的时候，非常好用。如果有兴趣可以看一些WWDC 2011的一个视频 – Mastering Source Control in Xcode 4. 此外在GUI的版本控制软件上，我推荐Source Tree,即支持git又支持mercurial。</p>
<p>在网站的界面方面：github给人的感觉更加的干净整齐，看上去很舒服，而bitbucket则要差一点，至少给我的体验是这样的。</p>
<p>在私有和公有项目方面：github对于免费用户来说只支持公开的项目，不支持私有项目，如果需要私有项目，需要升级到付费的用户。并且对于免费的个人用户来讲，现在的代码托管空间是0.3G，不过我想对于一般用户来说应该已经足够了。bitbucket在这方面则要大方的多，你可以使用bitbucket任意的创建自己的私有或者公有代码仓库，并且不限制大小。所以对于你不想公开的代码来讲，bitbucket是首选。</p>
<p>其他方面：个人认为在代码的显示方面，github要好于bitbucket. github上的代码高亮显示优于bitbucket，并且你能在github上面编辑自己的代码，但是在bitbucket上面则做不到。</p>
<p>总结：就个人感觉来说，我更喜欢使用github,因为我觉得很舒服，并且速度快（可能和我的网络有关系）。而bitbucket在支持私有项目方面又让我相当难以割舍。所以具体到你要选择哪个，完全取决于你的权衡了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在网上有很多代码托管网站，其中比较著名的有github, bitbucket和google code.但是就我现在个人的使用来看，我比较偏爱github 和 bitbucket. 所以不免将它们拿来比较一下，看看那个更适合自己。</p>
<p>在支持的版本控制工具上： g]]>
    </summary>
    
      <category term="github" scheme="http://little.cool/tags/github/"/>
    
      <category term="Tools" scheme="http://little.cool/categories/Tools/"/>
    
  </entry>
  
</feed>
